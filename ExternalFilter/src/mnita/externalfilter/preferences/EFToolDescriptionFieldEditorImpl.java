package mnita.externalfilter.preferences;

import mnita.externalfilter.utils.TextSource;
import mnita.externalfilter.utils.TextTarget;

import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.SWT;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.widgets.List;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Group;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Text;
import org.eclipse.swt.widgets.Combo;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.layout.RowLayout;

public class EFToolDescriptionFieldEditorImpl extends Composite {
    private Text textName;
    private Text textCommand;
//script    private Text textScript;
    private List listTools;
    private Combo comboOutput;
    private Combo comboInput;
    int nextTool = 1;

    private Button btnRemove;
    private Button btnFirst;
    private Button btnUp;
    private Button btnDown;
    private Button btnLast;

    // TODO: Would setItemData be better than keeping two lists in sync?
    public java.util.List<EFToolDescription> allTools = EFPreferenceConverter.FONTDATA_ARRAY_DEFAULT_DEFAULT;

    // This is generated by the SWT Designer, so we don't control the wrapping
    public EFToolDescriptionFieldEditorImpl(Composite parent, int style) {
        super(parent, style);
        setLayout(new GridLayout(1, false));

        Composite listArea = new Composite(this, SWT.NONE);
        listArea.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1));
        listArea.setLayout(new GridLayout(2, false));

        listTools = new List(listArea, SWT.BORDER);
        listTools.addSelectionListener(new SelectionAdapter() {
            @Override
            public void widgetSelected(SelectionEvent e) {
                onSelectionChanged();
            }
        });
        listTools.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1));

        Composite buttons = new Composite(listArea, SWT.NONE);
        buttons.setLayoutData(new GridData(SWT.LEFT, SWT.TOP, false, false, 1, 1));
        RowLayout buttons_layout = new RowLayout(SWT.VERTICAL);
        buttons_layout.fill = true;
        buttons.setLayout(buttons_layout);

        Button btnAdd = new Button(buttons, SWT.NONE);
        btnAdd.addSelectionListener(new SelectionAdapter() {
            @Override
            public void widgetSelected(SelectionEvent e) {
                onAdd();
            }
        });
        btnAdd.setText("Add");

        btnRemove = new Button(buttons, SWT.NONE);
        btnRemove.addSelectionListener(new SelectionAdapter() {
            @Override
            public void widgetSelected(SelectionEvent e) {
                onRemove();
            }
        });
        btnRemove.setText("Remove");

        Label label = new Label(buttons, SWT.SEPARATOR | SWT.HORIZONTAL);
        label.setAlignment(SWT.CENTER);

        btnFirst = new Button(buttons, SWT.NONE);
        btnFirst.addSelectionListener(new SelectionAdapter() {
            @Override
            public void widgetSelected(SelectionEvent e) {
                onFirst();
            }
        });
        btnFirst.setText("First");

        btnUp = new Button(buttons, SWT.NONE);
        btnUp.addSelectionListener(new SelectionAdapter() {
            @Override
            public void widgetSelected(SelectionEvent e) {
                onUp();
            }
        });
        btnUp.setText("Up");

        btnDown = new Button(buttons, SWT.NONE);
        btnDown.addSelectionListener(new SelectionAdapter() {
            @Override
            public void widgetSelected(SelectionEvent e) {
                onDown();
            }
        });
        btnDown.setText("Down");

        btnLast = new Button(buttons, SWT.NONE);
        btnLast.addSelectionListener(new SelectionAdapter() {
            @Override
            public void widgetSelected(SelectionEvent e) {
                onLast();
            }
        });
        btnLast.setText("Last");

        Group grpWtf = new Group(this, SWT.NONE);
        grpWtf.setText("Tool details:");
        grpWtf.setLayoutData(new GridData(SWT.FILL, SWT.TOP, true, false, 1, 1));
        grpWtf.setBounds(0, 0, 68, 68);
        grpWtf.setLayout(new GridLayout(2, false));

        Label lblName = new Label(grpWtf, SWT.NONE);
        lblName.setText("Name:");

        textName = new Text(grpWtf, SWT.BORDER);
        textName.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));

        Label lblCommand = new Label(grpWtf, SWT.NONE);
        lblCommand.setText("Command:");

        textCommand = new Text(grpWtf, SWT.BORDER);
        textCommand.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));
/*script
        Label lblScript = new Label(grpWtf, SWT.NONE);
        lblScript.setLayoutData(new GridData(SWT.LEFT, SWT.TOP, false, false, 1, 1));
        lblScript.setText("Script:");

        textScript = new Text(grpWtf, SWT.BORDER | SWT.MULTI | SWT.WRAP);
        GridData text_layout = new GridData(SWT.FILL, SWT.TOP, true, false, 1, 1);
        text_layout.heightHint = 100;
        textScript.setLayoutData(text_layout);
*/
        Label lblInput = new Label(grpWtf, SWT.NONE);
        lblInput.setText("Input:");

        comboInput = new Combo(grpWtf, SWT.READ_ONLY);
        comboInput.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));

        Label lblOutput = new Label(grpWtf, SWT.NONE);
        lblOutput.setText("Output:");

        comboOutput = new Combo(grpWtf, SWT.READ_ONLY);
        comboOutput.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));

        comboInput.setItems(TextSource.getDisplayNames());
        comboOutput.setItems(TextTarget.getDisplayNames());

        this.pack(true);
    }

    @Override
    protected void checkSubclass() {
        // Disable the check that prevents subclassing of SWT components
    }

    void onAdd() {
        EFToolDescription tool = new EFToolDescription(findAvailableToolName());
        listTools.add(tool.name);
        allTools.add(tool);
        listTools.select(listTools.getItemCount() - 1);
        onSelectionChanged();
    }

    void onRemove() {
        int itemCount = listTools.getItemCount();
        int index = listTools.getSelectionIndex();
        if (index != -1) {
            listTools.remove(index);
            allTools.remove(index);
            if (index >= itemCount - 1)
                listTools.select(index - 1);
            else
                listTools.select(index);
            onSelectionChanged();
        }
    }

    enum MoveType { FIRST, UP, DOWN, LAST }
    // -1, true => Up
    // 1, true => Down
    // -1, false => Top
    // list.length, false => Bottom
    void moveItem(MoveType moveType) {
        int oldPosition = listTools.getSelectionIndex();
        int len = allTools.size();

        if (len <= 0 || oldPosition < 0 || oldPosition >= len)
            return;

        int newPosition = oldPosition;
        switch (moveType) {
            case FIRST:
                newPosition = 0;
                break;
            case UP:
                if (oldPosition > 0)
                    newPosition = oldPosition - 1;
                break;
            case DOWN:
                if (oldPosition < len - 1)
                    newPosition = oldPosition + 1;
                break;
            case LAST:
                newPosition = len - 1;
                break;
            default:
                break;
        }

        if (oldPosition != newPosition) {
            EFToolDescription tool = allTools.get(oldPosition);
            listTools.remove(oldPosition);
            allTools.remove(oldPosition);
            listTools.add(tool.name, newPosition);
            allTools.add(newPosition, tool);
            listTools.select(newPosition);
            onSelectionChanged();
        }
    }

    void onUp() {
        moveItem(MoveType.UP);
    }

    void onDown() {
        moveItem(MoveType.DOWN);
    }

    void onFirst() {
        moveItem(MoveType.FIRST);
    }

    void onLast() {
        moveItem(MoveType.LAST);
    }

    public void onToolEdited() {
        int index = listTools.getSelectionIndex();
        if (index != -1) {
            EFToolDescription tool = allTools.get(index);
            String oldName = tool.name;
            tool.command = textCommand.getText();
//script            tool.script = textScript.getText();
            tool.inputMode = TextSource.values()[comboInput.getSelectionIndex()];
            tool.outputMode = TextTarget.values()[comboOutput.getSelectionIndex()];
            tool.name = textName.getText();
            if (!tool.name.equals(oldName))
                listTools.setItem(index, tool.name);
        }
    }

    void enableDisableButtons() {
        int itemCount = listTools.getItemCount();
        boolean enabled = itemCount > 0;

        btnRemove.setEnabled(enabled);

        enabled = itemCount > 1;
        btnFirst.setEnabled(enabled);
        btnUp.setEnabled(enabled);
        btnDown.setEnabled(enabled);
        btnLast.setEnabled(enabled);
    }

    void setEnableToolFields(boolean enabled) {
        textCommand.setEnabled(enabled);
//script        textScript.setEnabled(enabled);
        textName.setEnabled(enabled);
        comboInput.setEnabled(enabled);
        comboOutput.setEnabled(enabled);
    }

    void onSelectionChanged() {
        int index = listTools.getSelectionIndex();
        if (index != -1) {
            EFToolDescription tool = allTools.get(index);
            textCommand.setText(tool.command);
//script            textScript.setText(tool.script);
            textName.setText(tool.name);
            comboInput.select(tool.inputMode.ordinal());
            comboOutput.select(tool.outputMode.ordinal());
        } else {
            textCommand.setText("");
//script            textScript.setText("");
            textName.setText("");
            comboInput.select(0);
            comboOutput.select(0);
        }
        setEnableToolFields(index != -1);
        enableDisableButtons();
    }

    public void onListDataChanged() {
        listTools.removeAll();

        for (EFToolDescription tool: allTools)
            listTools.add(tool.name);

        listTools.select(0);
        onSelectionChanged();
    }

    boolean toolExists(String name) {
        if (null == name)
            return true;

        for (EFToolDescription tool: allTools)
            if (name.equals(tool.name))
                return true;

        return false;
    }

    String findAvailableToolName() {
        String name;
        do
            name = "Tool " + Integer.toString(nextTool++);
        while (toolExists(name));
        return name;
    }
}
